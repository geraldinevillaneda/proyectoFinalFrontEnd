/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/

const fse = require('fs-extra');
<<<<<<< HEAD
const path = require('path');

=======
const upath = require('upath');

const bundle = require('./bundle');
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
const errors = require('./errors');
const populateSWTemplate = require('./populate-sw-template');

module.exports = async ({
<<<<<<< HEAD
=======
  babelPresetEnvTargets,
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  cacheId,
  cleanupOutdatedCaches,
  clientsClaim,
  directoryIndex,
<<<<<<< HEAD
  handleFetch,
  ignoreURLParametersMatching,
  importScripts,
  manifestEntries,
  modulePathPrefix,
  navigateFallback,
  navigateFallbackBlacklist,
  navigateFallbackWhitelist,
=======
  disableDevLogs,
  ignoreURLParametersMatching,
  importScripts,
  inlineWorkboxRuntime,
  manifestEntries,
  mode,
  navigateFallback,
  navigateFallbackDenylist,
  navigateFallbackAllowlist,
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  navigationPreload,
  offlineGoogleAnalytics,
  runtimeCaching,
  skipWaiting,
<<<<<<< HEAD
  swDest,
  workboxSWImport,
}) => {
  try {
    await fse.mkdirp(path.dirname(swDest));
=======
  sourcemap,
  swDest,
}) => {
  const outputDir = upath.dirname(swDest);
  try {
    await fse.mkdirp(outputDir);
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  } catch (error) {
    throw new Error(`${errors['unable-to-make-sw-directory']}. ` +
      `'${error.message}'`);
  }

<<<<<<< HEAD
  const populatedTemplate = populateSWTemplate({
=======
  const unbundledCode = populateSWTemplate({
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    cacheId,
    cleanupOutdatedCaches,
    clientsClaim,
    directoryIndex,
<<<<<<< HEAD
    handleFetch,
    ignoreURLParametersMatching,
    importScripts,
    manifestEntries,
    modulePathPrefix,
    navigateFallback,
    navigateFallbackBlacklist,
    navigateFallbackWhitelist,
=======
    disableDevLogs,
    ignoreURLParametersMatching,
    importScripts,
    manifestEntries,
    navigateFallback,
    navigateFallbackDenylist,
    navigateFallbackAllowlist,
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    navigationPreload,
    offlineGoogleAnalytics,
    runtimeCaching,
    skipWaiting,
<<<<<<< HEAD
    workboxSWImport,
  });

  try {
    await fse.writeFile(swDest, populatedTemplate);
=======
  });

  try {
    const files = await bundle({
      babelPresetEnvTargets,
      inlineWorkboxRuntime,
      mode,
      sourcemap,
      swDest,
      unbundledCode,
    });

    const filePaths = [];

    for (const file of files) {
      const filePath = upath.resolve(file.name);
      filePaths.push(filePath);
      await fse.writeFile(filePath, file.contents);
    }

    return filePaths;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  } catch (error) {
    if (error.code === 'EISDIR') {
      // See https://github.com/GoogleChrome/workbox/issues/612
      throw new Error(errors['sw-write-failure-directory']);
    }
<<<<<<< HEAD
    throw new Error(`${errors['sw-write-failure']}. '${error.message}'`);
=======
    throw new Error(`${errors['sw-write-failure']} '${error.message}'`);
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  }
};
