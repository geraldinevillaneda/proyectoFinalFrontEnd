<<<<<<< HEAD
import { TSESTree } from '../ts-estree';
declare namespace Scope {
    interface ScopeManager {
        scopes: Scope[];
        globalScope: Scope | null;
        acquire(node: TSESTree.Node, inner?: boolean): Scope | null;
        getDeclaredVariables(node: TSESTree.Node): Variable[];
    }
    interface Reference {
        identifier: TSESTree.Identifier;
        from: Scope;
        resolved: Variable | null;
        writeExpr: TSESTree.Node | null;
        init: boolean;
        isWrite(): boolean;
        isRead(): boolean;
        isWriteOnly(): boolean;
        isReadOnly(): boolean;
        isReadWrite(): boolean;
    }
    interface Variable {
        name: string;
        identifiers: TSESTree.Identifier[];
        references: Reference[];
        defs: Definition[];
        scope: Scope;
        eslintUsed?: boolean;
    }
    interface Scope {
        type: 'block' | 'catch' | 'class' | 'for' | 'function' | 'function-expression-name' | 'global' | 'module' | 'switch' | 'with' | 'TDZ';
        isStrict: boolean;
        upper: Scope | null;
        childScopes: Scope[];
        variableScope: Scope;
        block: TSESTree.Node;
        variables: Variable[];
        set: Map<string, Variable>;
        references: Reference[];
        through: Reference[];
        functionExpressionScope: boolean;
    }
    type DefinitionType = {
        type: 'CatchClause';
        node: TSESTree.CatchClause;
        parent: null;
    } | {
        type: 'ClassName';
        node: TSESTree.ClassDeclaration | TSESTree.ClassExpression;
        parent: null;
    } | {
        type: 'FunctionName';
        node: TSESTree.FunctionDeclaration | TSESTree.FunctionExpression;
        parent: null;
    } | {
        type: 'ImplicitGlobalVariable';
        node: TSESTree.Program;
        parent: null;
    } | {
        type: 'ImportBinding';
        node: TSESTree.ImportSpecifier | TSESTree.ImportDefaultSpecifier | TSESTree.ImportNamespaceSpecifier;
        parent: TSESTree.ImportDeclaration;
    } | {
        type: 'Parameter';
        node: TSESTree.FunctionDeclaration | TSESTree.FunctionExpression | TSESTree.ArrowFunctionExpression;
        parent: null;
    } | {
        type: 'TDZ';
        node: unknown;
        parent: null;
    } | {
        type: 'Variable';
        node: TSESTree.VariableDeclarator;
        parent: TSESTree.VariableDeclaration;
    };
    type Definition = DefinitionType & {
        name: TSESTree.Identifier;
    };
=======
import * as scopeManager from '@typescript-eslint/scope-manager';
declare namespace Scope {
    type ScopeManager = scopeManager.ScopeManager;
    type Reference = scopeManager.Reference;
    type Variable = scopeManager.Variable | scopeManager.ESLintScopeVariable;
    type Scope = scopeManager.Scope;
    const ScopeType: typeof scopeManager.ScopeType;
    type DefinitionType = scopeManager.Definition;
    type Definition = scopeManager.Definition;
    const DefinitionType: typeof scopeManager.DefinitionType;
    namespace Definitions {
        type CatchClauseDefinition = scopeManager.CatchClauseDefinition;
        type ClassNameDefinition = scopeManager.ClassNameDefinition;
        type FunctionNameDefinition = scopeManager.FunctionNameDefinition;
        type ImplicitGlobalVariableDefinition = scopeManager.ImplicitGlobalVariableDefinition;
        type ImportBindingDefinition = scopeManager.ImportBindingDefinition;
        type ParameterDefinition = scopeManager.ParameterDefinition;
        type TSEnumMemberDefinition = scopeManager.TSEnumMemberDefinition;
        type TSEnumNameDefinition = scopeManager.TSEnumNameDefinition;
        type TSModuleNameDefinition = scopeManager.TSModuleNameDefinition;
        type TypeDefinition = scopeManager.TypeDefinition;
        type VariableDefinition = scopeManager.VariableDefinition;
    }
    namespace Scopes {
        type BlockScope = scopeManager.BlockScope;
        type CatchScope = scopeManager.CatchScope;
        type ClassScope = scopeManager.ClassScope;
        type ConditionalTypeScope = scopeManager.ConditionalTypeScope;
        type ForScope = scopeManager.ForScope;
        type FunctionExpressionNameScope = scopeManager.FunctionExpressionNameScope;
        type FunctionScope = scopeManager.FunctionScope;
        type FunctionTypeScope = scopeManager.FunctionTypeScope;
        type GlobalScope = scopeManager.GlobalScope;
        type MappedTypeScope = scopeManager.MappedTypeScope;
        type ModuleScope = scopeManager.ModuleScope;
        type SwitchScope = scopeManager.SwitchScope;
        type TSEnumScope = scopeManager.TSEnumScope;
        type TSModuleScope = scopeManager.TSModuleScope;
        type TypeScope = scopeManager.TypeScope;
        type WithScope = scopeManager.WithScope;
    }
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
}
export { Scope };
//# sourceMappingURL=Scope.d.ts.map