"use strict";
<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", { value: true });
const NormalizedMessage_1 = require("./NormalizedMessage");
const FsHelper_1 = require("./FsHelper");
const NormalizedMessageFactories_1 = require("./NormalizedMessageFactories");
const path = require("path");
function createEslinter(eslintOptions) {
    // tslint:disable-next-line:no-implicit-dependencies
    const eslint = require('eslint');
    // See https://eslint.org/docs/1.0.0/developer-guide/nodejs-api#cliengine
    const eslinter = new eslint.CLIEngine(eslintOptions);
    const createNormalizedMessageFromEsLintFailure = NormalizedMessageFactories_1.makeCreateNormalizedMessageFromEsLintFailure();
    function getLintsForFile(filepath) {
=======
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = __importStar(require("path"));
var FsHelper_1 = require("./FsHelper");
function createEslinter(eslintOptions) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    var CLIEngine = require('eslint').CLIEngine;
    // See https://eslint.org/docs/developer-guide/nodejs-api#cliengine
    var eslinter = new CLIEngine(eslintOptions);
    function getReport(filepath) {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
        try {
            if (eslinter.isPathIgnored(filepath) ||
                path.extname(filepath).localeCompare('.json', undefined, {
                    sensitivity: 'accent'
                }) === 0) {
                return undefined;
            }
<<<<<<< HEAD
            const lints = eslinter.executeOnFiles([filepath]);
            return lints;
=======
            var lintReport = eslinter.executeOnFiles([filepath]);
            if (eslintOptions && eslintOptions.fix) {
                CLIEngine.outputFixes(lintReport);
            }
            return lintReport;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
        }
        catch (e) {
            FsHelper_1.throwIfIsInvalidSourceFileError(filepath, e);
        }
        return undefined;
    }
<<<<<<< HEAD
    function getFormattedLints(lintReports) {
        const allEsLints = [];
        for (const value of lintReports) {
            for (const lint of value.results) {
                allEsLints.push(...lint.messages.map(message => createNormalizedMessageFromEsLintFailure(message, lint.filePath)));
            }
        }
        return NormalizedMessage_1.NormalizedMessage.deduplicate(allEsLints);
    }
    return { getLints: getLintsForFile, getFormattedLints };
=======
    return { getReport: getReport };
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
}
exports.createEslinter = createEslinter;
//# sourceMappingURL=createEslinter.js.map