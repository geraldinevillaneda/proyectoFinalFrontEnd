{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\r\nimport { Route, Switch, Redirect, useHistory } from \"react-router-dom\";\r\nimport { Routes } from \"../routes\";\r\n\r\n// pages\r\nimport Presentation from \"./Presentation\";\r\nimport Login from \"./Login/login\"\r\nimport CreateUserPage from './createUser/createUserPage'\r\nimport Upgrade from \"./Upgrade\";\r\nimport DashboardOverview from \"./dashboard/DashboardOverview\";\r\nimport EditUser from './editUser'\r\nimport ReadUser from './leerUsuario'\r\nimport CreateStation from './createStation/createStation'\r\n\r\nimport Transactions from \"./Transactions\";\r\nimport Settings from \"./Settings\";\r\nimport BootstrapTables from \"./tables/BootstrapTables\";\r\nimport Signin from \"./examples/Signin\";\r\nimport Signup from \"./examples/Signup\";\r\nimport ForgotPassword from \"./examples/ForgotPassword\";\r\nimport ResetPassword from \"./examples/ResetPassword\";\r\nimport Lock from \"./examples/Lock\";\r\nimport NotFoundPage from \"./examples/NotFound\";\r\nimport ServerError from \"./examples/ServerError\";\r\n\r\n// documentation pages\r\nimport DocsOverview from \"./documentation/DocsOverview\";\r\nimport DocsDownload from \"./documentation/DocsDownload\";\r\nimport DocsQuickStart from \"./documentation/DocsQuickStart\";\r\nimport DocsLicense from \"./documentation/DocsLicense\";\r\nimport DocsFolderStructure from \"./documentation/DocsFolderStructure\";\r\nimport DocsBuild from \"./documentation/DocsBuild\";\r\nimport DocsChangelog from \"./documentation/DocsChangelog\";\r\n\r\n// components\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport Preloader from \"../components/Preloader\";\r\n\r\nimport Accordion from \"./components/Accordion\";\r\nimport Alerts from \"./components/Alerts\";\r\nimport Badges from \"./components/Badges\";\r\nimport Breadcrumbs from \"./components/Breadcrumbs\";\r\nimport Buttons from \"./components/Buttons\";\r\nimport Forms from \"./components/Forms\";\r\nimport Modals from \"./components/Modals\";\r\nimport Navs from \"./components/Navs\";\r\nimport Navbars from \"./components/Navbars\";\r\nimport Pagination from \"./components/Pagination\";\r\nimport Popovers from \"./components/Popovers\";\r\nimport Progress from \"./components/Progress\";\r\nimport Tables from \"./components/Tables\";\r\nimport Tabs from \"./components/Tabs\";\r\nimport Tooltips from \"./components/Tooltips\";\r\nimport Toasts from \"./components/Toasts\";\r\n\r\nimport Header from '../components/Header/index'\r\n\r\nconst RouteWithLoader = ({ component: Component, ...rest }) => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setLoaded(true), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <Route {...rest} render={props => ( <> <Preloader show={loaded ? false : true} /> <Component {...props} /> </> ) } />\r\n  );\r\n};\r\n\r\nconst RouteWithSidebar = ({ component: Component, ...rest }) => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setLoaded(true), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const localStorageIsSettingsVisible = () => {\r\n    return localStorage.getItem('settingsVisible') === 'false' ? false : true\r\n  }\r\n\r\n  const [showSettings, setShowSettings] = useState(localStorageIsSettingsVisible);\r\n\r\n  const toggleSettings = () => {\r\n    setShowSettings(!showSettings);\r\n    localStorage.setItem('settingsVisible', !showSettings);\r\n  }\r\n\r\n  const navigate = useHistory();\r\n  const variables = JSON.parse(sessionStorage.getItem('login'));\r\n  let islogged = true;\r\n\r\n  if(variables === null)\r\n  {\r\n      islogged = false\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    {islogged ? \r\n    <Route {...rest} render={props => (\r\n      <>\r\n        <Preloader show={loaded ? false : true} />\r\n        <Sidebar />\r\n\r\n        <main className=\"content\">\r\n          <Navbar />\r\n          <Component {...props} />\r\n          <Footer toggleSettings={toggleSettings} showSettings={showSettings} />\r\n        </main>\r\n      </>\r\n    )}\r\n    /> : navigate.push('/')}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default () => (\r\n  <Switch>\r\n    <RouteWithLoader exact path={Routes.Presentation.path} component={Presentation} />\r\n    <RouteWithLoader exact path={Routes.Login.path} component={Login} />\r\n    <RouteWithLoader exact path={Routes.CreateUser.path} component={CreateUserPage} />\r\n\r\n\r\n    <RouteWithLoader exact path={Routes.Signin.path} component={Signin} />\r\n    <RouteWithLoader exact path={Routes.Signup.path} component={Signup} />\r\n    <RouteWithLoader exact path={Routes.ForgotPassword.path} component={ForgotPassword} />\r\n    <RouteWithLoader exact path={Routes.ResetPassword.path} component={ResetPassword} />\r\n    <RouteWithLoader exact path={Routes.Lock.path} component={Lock} />\r\n    <RouteWithLoader exact path={Routes.NotFound.path} component={NotFoundPage} />\r\n    <RouteWithLoader exact path={Routes.ServerError.path} component={ServerError} />\r\n*/\n//{/* pages */}\n\n/*<RouteWithSidebar exact path={Routes.DashboardOverview.path} component={DashboardOverview} />\r\n<RouteWithSidebar exact path={Routes.EditUser.path} component={EditUser} />\r\n<RouteWithSidebar exact path={Routes.ReadUser.path} component={ReadUser} />\r\n\r\n<RouteWithSidebar exact path={Routes.CreateEstation.path} component={CreateStation} />\r\n<RouteWithSidebar exact path={Routes.Transactions.path} component={Transactions} />\r\n<RouteWithSidebar exact path={Routes.Settings.path} component={Settings} />\r\n<RouteWithSidebar exact path={Routes.BootstrapTables.path} component={BootstrapTables} />\r\n*/\n//{/* components */}\n\n/*<RouteWithSidebar exact path={Routes.Accordions.path} component={Accordion} />\r\n<RouteWithSidebar exact path={Routes.Alerts.path} component={Alerts} />\r\n<RouteWithSidebar exact path={Routes.Badges.path} component={Badges} />\r\n<RouteWithSidebar exact path={Routes.Breadcrumbs.path} component={Breadcrumbs} />\r\n<RouteWithSidebar exact path={Routes.Buttons.path} component={Buttons} />\r\n<RouteWithSidebar exact path={Routes.Forms.path} component={Forms} />\r\n<RouteWithSidebar exact path={Routes.Modals.path} component={Modals} />\r\n<RouteWithSidebar exact path={Routes.Navs.path} component={Navs} />\r\n<RouteWithSidebar exact path={Routes.Navbars.path} component={Navbars} />\r\n<RouteWithSidebar exact path={Routes.Pagination.path} component={Pagination} />\r\n<RouteWithSidebar exact path={Routes.Popovers.path} component={Popovers} />\r\n<RouteWithSidebar exact path={Routes.Progress.path} component={Progress} />\r\n<RouteWithSidebar exact path={Routes.Tables.path} component={Tables} />\r\n<RouteWithSidebar exact path={Routes.Tabs.path} component={Tabs} />\r\n<RouteWithSidebar exact path={Routes.Tooltips.path} component={Tooltips} />\r\n<RouteWithSidebar exact path={Routes.Toasts.path} component={Toasts} />\r\n*/\n//{/* documentation */}\n\n/*<RouteWithSidebar exact path={Routes.DocsOverview.path} component={DocsOverview} />\r\n <RouteWithSidebar exact path={Routes.DocsDownload.path} component={DocsDownload} />\r\n <RouteWithSidebar exact path={Routes.DocsQuickStart.path} component={DocsQuickStart} />\r\n <RouteWithSidebar exact path={Routes.DocsLicense.path} component={DocsLicense} />\r\n <RouteWithSidebar exact path={Routes.DocsFolderStructure.path} component={DocsFolderStructure} />\r\n <RouteWithSidebar exact path={Routes.DocsBuild.path} component={DocsBuild} />\r\n <RouteWithSidebar exact path={Routes.DocsChangelog.path} component={DocsChangelog} />\r\n   <Redirect to={Routes.NotFound.path} />\r\n</Switch>\r\n);*/","map":{"version":3,"sources":["C:/Users/Usuario/Documents/Univalle/Trabajos univalle/Semestre X/SaaS/Nueva carpeta/proyectoFinalFrontEnd/src/pages/HomePage.js"],"names":[],"mappingssourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport { Route, Switch, Redirect, useHistory } from \"react-router-dom\";\r\nimport { Routes } from \"../routes\";\r\n\r\n// pages\r\nimport Presentation from \"./Presentation\";\r\nimport Login from \"./Login/login\"\r\nimport CreateUserPage from './createUser/createUserPage'\r\nimport Upgrade from \"./Upgrade\";\r\nimport DashboardOverview from \"./dashboard/DashboardOverview\";\r\nimport EditUser from './editUser'\r\nimport ReadUser from './leerUsuario'\r\nimport CreateStation from './createStation/createStation'\r\n\r\nimport Transactions from \"./Transactions\";\r\nimport Settings from \"./Settings\";\r\nimport BootstrapTables from \"./tables/BootstrapTables\";\r\nimport Signin from \"./examples/Signin\";\r\nimport Signup from \"./examples/Signup\";\r\nimport ForgotPassword from \"./examples/ForgotPassword\";\r\nimport ResetPassword from \"./examples/ResetPassword\";\r\nimport Lock from \"./examples/Lock\";\r\nimport NotFoundPage from \"./examples/NotFound\";\r\nimport ServerError from \"./examples/ServerError\";\r\n\r\n// documentation pages\r\nimport DocsOverview from \"./documentation/DocsOverview\";\r\nimport DocsDownload from \"./documentation/DocsDownload\";\r\nimport DocsQuickStart from \"./documentation/DocsQuickStart\";\r\nimport DocsLicense from \"./documentation/DocsLicense\";\r\nimport DocsFolderStructure from \"./documentation/DocsFolderStructure\";\r\nimport DocsBuild from \"./documentation/DocsBuild\";\r\nimport DocsChangelog from \"./documentation/DocsChangelog\";\r\n\r\n// components\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport Preloader from \"../components/Preloader\";\r\n\r\nimport Accordion from \"./components/Accordion\";\r\nimport Alerts from \"./components/Alerts\";\r\nimport Badges from \"./components/Badges\";\r\nimport Breadcrumbs from \"./components/Breadcrumbs\";\r\nimport Buttons from \"./components/Buttons\";\r\nimport Forms from \"./components/Forms\";\r\nimport Modals from \"./components/Modals\";\r\nimport Navs from \"./components/Navs\";\r\nimport Navbars from \"./components/Navbars\";\r\nimport Pagination from \"./components/Pagination\";\r\nimport Popovers from \"./components/Popovers\";\r\nimport Progress from \"./components/Progress\";\r\nimport Tables from \"./components/Tables\";\r\nimport Tabs from \"./components/Tabs\";\r\nimport Tooltips from \"./components/Tooltips\";\r\nimport Toasts from \"./components/Toasts\";\r\n\r\nimport Header from '../components/Header/index'\r\n\r\nconst RouteWithLoader = ({ component: Component, ...rest }) => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setLoaded(true), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <Route {...rest} render={props => ( <> <Preloader show={loaded ? false : true} /> <Component {...props} /> </> ) } />\r\n  );\r\n};\r\n\r\nconst RouteWithSidebar = ({ component: Component, ...rest }) => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setLoaded(true), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const localStorageIsSettingsVisible = () => {\r\n    return localStorage.getItem('settingsVisible') === 'false' ? false : true\r\n  }\r\n\r\n  const [showSettings, setShowSettings] = useState(localStorageIsSettingsVisible);\r\n\r\n  const toggleSettings = () => {\r\n    setShowSettings(!showSettings);\r\n    localStorage.setItem('settingsVisible', !showSettings);\r\n  }\r\n\r\n  const navigate = useHistory();\r\n  const variables = JSON.parse(sessionStorage.getItem('login'));\r\n  let islogged = true;\r\n\r\n  if(variables === null)\r\n  {\r\n      islogged = false\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    {islogged ? \r\n    <Route {...rest} render={props => (\r\n      <>\r\n        <Preloader show={loaded ? false : true} />\r\n        <Sidebar />\r\n\r\n        <main className=\"content\">\r\n          <Navbar />\r\n          <Component {...props} />\r\n          <Footer toggleSettings={toggleSettings} showSettings={showSettings} />\r\n        </main>\r\n      </>\r\n    )}\r\n    /> : navigate.push('/')}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default () => (\r\n  <Switch>\r\n    <RouteWithLoader exact path={Routes.Presentation.path} component={Presentation} />\r\n    <RouteWithLoader exact path={Routes.Login.path} component={Login} />\r\n    <RouteWithLoader exact path={Routes.CreateUser.path} component={CreateUserPage} />\r\n\r\n\r\n    <RouteWithLoader exact path={Routes.Signin.path} component={Signin} />\r\n    <RouteWithLoader exact path={Routes.Signup.path} component={Signup} />\r\n    <RouteWithLoader exact path={Routes.ForgotPassword.path} component={ForgotPassword} />\r\n    <RouteWithLoader exact path={Routes.ResetPassword.path} component={ResetPassword} />\r\n    <RouteWithLoader exact path={Routes.Lock.path} component={Lock} />\r\n    <RouteWithLoader exact path={Routes.NotFound.path} component={NotFoundPage} />\r\n    <RouteWithLoader exact path={Routes.ServerError.path} component={ServerError} />\r\n*/\r\n    //{/* pages */}\r\n    /*<RouteWithSidebar exact path={Routes.DashboardOverview.path} component={DashboardOverview} />\r\n    <RouteWithSidebar exact path={Routes.EditUser.path} component={EditUser} />\r\n    <RouteWithSidebar exact path={Routes.ReadUser.path} component={ReadUser} />\r\n    \r\n    <RouteWithSidebar exact path={Routes.CreateEstation.path} component={CreateStation} />\r\n    <RouteWithSidebar exact path={Routes.Transactions.path} component={Transactions} />\r\n    <RouteWithSidebar exact path={Routes.Settings.path} component={Settings} />\r\n    <RouteWithSidebar exact path={Routes.BootstrapTables.path} component={BootstrapTables} />\r\n*/\r\n    //{/* components */}\r\n    /*<RouteWithSidebar exact path={Routes.Accordions.path} component={Accordion} />\r\n    <RouteWithSidebar exact path={Routes.Alerts.path} component={Alerts} />\r\n    <RouteWithSidebar exact path={Routes.Badges.path} component={Badges} />\r\n    <RouteWithSidebar exact path={Routes.Breadcrumbs.path} component={Breadcrumbs} />\r\n    <RouteWithSidebar exact path={Routes.Buttons.path} component={Buttons} />\r\n    <RouteWithSidebar exact path={Routes.Forms.path} component={Forms} />\r\n    <RouteWithSidebar exact path={Routes.Modals.path} component={Modals} />\r\n    <RouteWithSidebar exact path={Routes.Navs.path} component={Navs} />\r\n    <RouteWithSidebar exact path={Routes.Navbars.path} component={Navbars} />\r\n    <RouteWithSidebar exact path={Routes.Pagination.path} component={Pagination} />\r\n    <RouteWithSidebar exact path={Routes.Popovers.path} component={Popovers} />\r\n    <RouteWithSidebar exact path={Routes.Progress.path} component={Progress} />\r\n    <RouteWithSidebar exact path={Routes.Tables.path} component={Tables} />\r\n    <RouteWithSidebar exact path={Routes.Tabs.path} component={Tabs} />\r\n    <RouteWithSidebar exact path={Routes.Tooltips.path} component={Tooltips} />\r\n    <RouteWithSidebar exact path={Routes.Toasts.path} component={Toasts} />\r\n*/\r\n    //{/* documentation */}\r\n   /*<RouteWithSidebar exact path={Routes.DocsOverview.path} component={DocsOverview} />\r\n    <RouteWithSidebar exact path={Routes.DocsDownload.path} component={DocsDownload} />\r\n    <RouteWithSidebar exact path={Routes.DocsQuickStart.path} component={DocsQuickStart} />\r\n    <RouteWithSidebar exact path={Routes.DocsLicense.path} component={DocsLicense} />\r\n    <RouteWithSidebar exact path={Routes.DocsFolderStructure.path} component={DocsFolderStructure} />\r\n    <RouteWithSidebar exact path={Routes.DocsBuild.path} component={DocsBuild} />\r\n    <RouteWithSidebar exact path={Routes.DocsChangelog.path} component={DocsChangelog} />\r\n\r\n    <Redirect to={Routes.NotFound.path} />\r\n  </Switch>\r\n);*/\r\n"]},"metadata":{},"sourceType":"module"}