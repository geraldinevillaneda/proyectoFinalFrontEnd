{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geral\\\\Desktop\\\\REPOS\\\\PROYECTOFINAL\\\\proyectoFinalFrontEnd\\\\src\\\\pages\\\\components\\\\Alerts.js\";\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBullhorn } from '@fortawesome/free-solid-svg-icons';\nimport { Col, Row, Alert, Button, Container } from '@themesberg/react-bootstrap';\nimport Documentation from \"../../components/Documentation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (() => {\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"px-0\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"d-flex flex-wrap flex-md-nowrap align-items-center py-4\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"d-block mb-4 mb-md-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"h2\",\n            children: \"Alerts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-0\",\n            children: \"Use alerts to provide contextual feedback to your users based on their input and behaviour.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Documentation, {\n        title: \"Example\",\n        description: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"<Alert>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 20\n          }, this), \" component can be used to show your users error, success, informational or warning messages. Use component properties such as  \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"variant=\\\"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 177\n          }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"variant=\\\"secondary\\\"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 210\n          }, this), \" to use the colors from the Sass variables:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this),\n        scope: {\n          Alert\n        },\n        imports: `import { Alert } from '@themesberg/react-bootstrap';`,\n        example: `<React.Fragment>\n  <Alert variant=\"primary\">\n    A simple primary alert — check it out!\n  </Alert>\n  <Alert variant=\"secondary\">\n    A simple secondary alert — check it out!\n  </Alert>\n  <Alert variant=\"success\">\n    A simple success alert — check it out!\n  </Alert>\n  <Alert variant=\"danger\">\n    A simple danger alert — check it out!\n  </Alert>\n  <Alert variant=\"warning\">\n    A simple warning alert — check it out!\n  </Alert>\n  <Alert variant=\"info\">\n    A simple info alert — check it out!\n  </Alert>\n  <Alert variant=\"light\">\n    A simple light alert — check it out!\n  </Alert>\n  <Alert variant=\"dark\">\n    A simple dark alert — check it out!\n  </Alert>\n</React.Fragment>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Documentation, {\n        title: \"Dismissable alerts\",\n        description: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"<Alert>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 20\n          }, this), \" component can be used to create an alert component that can be closed by clicking on the close icon by adding the \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"show\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 165\n          }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"onClose\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 187\n          }, this), \" properties. Additionally, you can also use the \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"<FontAwesomeIcon>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 255\n          }, this), \" component to add an icon inside the alert component.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this),\n        scope: {\n          Alert,\n          Button,\n          FontAwesomeIcon,\n          faBullhorn\n        },\n        imports: `import { Alert, Button } from '@themesberg/react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBullhorn } from \"@fortawesome/free-solid-svg-icons\";`,\n        example: `function DismissableAlerts() {\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\n\n  const onClose = (alertId) => {\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\n    setHiddenAlerts(hiddenAlertsUpdated);\n  };\n\n  const shouldShowAlert = (alertId) => (\n    hiddenAlerts.indexOf(alertId) === -1\n  );\n\n  return(\n    <React.Fragment>\n      <Alert\n        variant=\"primary\"\n        show={shouldShowAlert(\"primary\")}\n        onClose={() => onClose(\"primary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"primary\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"secondary\"\n        show={shouldShowAlert(\"secondary\")}\n        onClose={() => onClose(\"secondary\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"secondary\")} />\n        </div>\n      </Alert>\n      \n      <Alert\n        variant=\"danger\"\n        show={shouldShowAlert(\"danger\")}\n        onClose={() => onClose(\"danger\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"danger\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"success\"\n        show={shouldShowAlert(\"success\")}\n        onClose={() => onClose(\"success\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"success\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"warning\"\n        show={shouldShowAlert(\"warning\")}\n        onClose={() => onClose(\"warning\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"warning\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"light\"\n        show={shouldShowAlert(\"light\")}\n        onClose={() => onClose(\"light\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"light\")} />\n        </div>\n      </Alert>\n\n      <Alert\n        variant=\"dark\"\n        show={shouldShowAlert(\"dark\")}\n        onClose={() => onClose(\"dark\")}>\n\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\n          </div>\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"dark\")} />\n        </div>\n      </Alert>\n    </React.Fragment>\n  );\n}\n\nrender( <DismissableAlerts /> );`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["C:/Users/geral/Desktop/REPOS/PROYECTOFINAL/proyectoFinalFrontEnd/src/pages/components/Alerts.js"],"names":["React","FontAwesomeIcon","faBullhorn","Col","Row","Alert","Button","Container","Documentation"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,6BAAnD;AAEA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,gBAAe,MAAM;AACnB,sBACE;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,MAArB;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,yDAAf;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA,kCACE;AAAI,YAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,aAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,WAAW,eACT;AAAA,0CAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,kJAAoK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAApK,uBAAqM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAArM;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAKE,QAAA,KAAK,EAAE;AAAEH,UAAAA;AAAF,SALT;AAME,QAAA,OAAO,EAAG,sDANZ;AAOE,QAAA,OAAO,EAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCQ;AAAA;AAAA;AAAA;AAAA,cAVF,eA6CE,QAAC,aAAD;AACE,QAAA,KAAK,EAAC,oBADR;AAEE,QAAA,WAAW,eACT;AAAA,0CAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,sIAAwJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAxJ,wBAA8K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA9K,mEAAkP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAlP;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAKE,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAF;AAASC,UAAAA,MAAT;AAAiBL,UAAAA,eAAjB;AAAkCC,UAAAA;AAAlC,SALT;AAME,QAAA,OAAO,EAAG;AACpB;AACA,gEARQ;AASE,QAAA,OAAO,EAAG;AACpcA7CF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgLD,CAjLD","sourcesContent":["\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBullhorn } from '@fortawesome/free-solid-svg-icons';\r\nimport { Col, Row, Alert, Button, Container } from '@themesberg/react-bootstrap';\r\n\r\nimport Documentation from \"../../components/Documentation\";\r\n\r\nexport default () => {\r\n  return (\r\n    <article>\r\n      <Container className=\"px-0\">\r\n        <Row className=\"d-flex flex-wrap flex-md-nowrap align-items-center py-4\">\r\n          <Col className=\"d-block mb-4 mb-md-0\">\r\n            <h1 className=\"h2\">Alerts</h1>\r\n            <p className=\"mb-0\">\r\n              Use alerts to provide contextual feedback to your users based on their input and behaviour.\r\n        </p>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Documentation\r\n          title=\"Example\"\r\n          description={\r\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to show your users error, success, informational or warning messages. Use component properties such as  <code>variant=\"primary</code> or <code>variant=\"secondary\"</code> to use the colors from the Sass variables:</p>\r\n          }\r\n          scope={{ Alert }}\r\n          imports={`import { Alert } from '@themesberg/react-bootstrap';`}\r\n          example={`<React.Fragment>\r\n  <Alert variant=\"primary\">\r\n    A simple primary alert — check it out!\r\n  </Alert>\r\n  <Alert variant=\"secondary\">\r\n    A simple secondary alert — check it out!\r\n  </Alert>\r\n  <Alert variant=\"success\">\r\n    A simple success alert — check it out!\r\n  </Alert>\r\n  <Alert variant=\"danger\">\r\n    A simple danger alert — check it out!\r\n  </Alert>\r\n  <Alert variant=\"warning\">\r\n    A simple warning alert — check it out!\r\n  </Alert>\r\n  <Alert variant=\"info\">\r\n    A simple info alert — check it out!\r\n  </Alert>\r\n  <Alert variant=\"light\">\r\n    A simple light alert — check it out!\r\n  </Alert>\r\n  <Alert variant=\"dark\">\r\n    A simple dark alert — check it out!\r\n  </Alert>\r\n</React.Fragment>`}\r\n        />\r\n\r\n        <Documentation\r\n          title=\"Dismissable alerts\"\r\n          description={\r\n            <p>The <code>&#x3C;Alert&#x3E;</code> component can be used to create an alert component that can be closed by clicking on the close icon by adding the <code>show</code> and <code>onClose</code> properties. Additionally, you can also use the <code>&#x3C;FontAwesomeIcon&#x3E;</code> component to add an icon inside the alert component.</p>\r\n          }\r\n          scope={{ Alert, Button, FontAwesomeIcon, faBullhorn }}\r\n          imports={`import { Alert, Button } from '@themesberg/react-bootstrap';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBullhorn } from \"@fortawesome/free-solid-svg-icons\";`}\r\n          example={`function DismissableAlerts() {\r\n  const [hiddenAlerts, setHiddenAlerts] = React.useState([]);\r\n\r\n  const onClose = (alertId) => {\r\n    const hiddenAlertsUpdated = [...hiddenAlerts, alertId];\r\n    setHiddenAlerts(hiddenAlertsUpdated);\r\n  };\r\n\r\n  const shouldShowAlert = (alertId) => (\r\n    hiddenAlerts.indexOf(alertId) === -1\r\n  );\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <Alert\r\n        variant=\"primary\"\r\n        show={shouldShowAlert(\"primary\")}\r\n        onClose={() => onClose(\"primary\")}>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\r\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n          </div>\r\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"primary\")} />\r\n        </div>\r\n      </Alert>\r\n\r\n      <Alert\r\n        variant=\"secondary\"\r\n        show={shouldShowAlert(\"secondary\")}\r\n        onClose={() => onClose(\"secondary\")}>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\r\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n          </div>\r\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"secondary\")} />\r\n        </div>\r\n      </Alert>\r\n      \r\n      <Alert\r\n        variant=\"danger\"\r\n        show={shouldShowAlert(\"danger\")}\r\n        onClose={() => onClose(\"danger\")}>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\r\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n          </div>\r\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"danger\")} />\r\n        </div>\r\n      </Alert>\r\n\r\n      <Alert\r\n        variant=\"success\"\r\n        show={shouldShowAlert(\"success\")}\r\n        onClose={() => onClose(\"success\")}>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\r\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n          </div>\r\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"success\")} />\r\n        </div>\r\n      </Alert>\r\n\r\n      <Alert\r\n        variant=\"warning\"\r\n        show={shouldShowAlert(\"warning\")}\r\n        onClose={() => onClose(\"warning\")}>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\r\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n          </div>\r\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"warning\")} />\r\n        </div>\r\n      </Alert>\r\n\r\n      <Alert\r\n        variant=\"light\"\r\n        show={shouldShowAlert(\"light\")}\r\n        onClose={() => onClose(\"light\")}>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\r\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n          </div>\r\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"light\")} />\r\n        </div>\r\n      </Alert>\r\n\r\n      <Alert\r\n        variant=\"dark\"\r\n        show={shouldShowAlert(\"dark\")}\r\n        onClose={() => onClose(\"dark\")}>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <FontAwesomeIcon icon={faBullhorn} className=\"me-1\" />\r\n            <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n          </div>\r\n          <Button variant=\"close\" size=\"xs\" onClick={() => onClose(\"dark\")} />\r\n        </div>\r\n      </Alert>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nrender( <DismissableAlerts /> );`}\r\n        />\r\n      </Container>\r\n    </article>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}