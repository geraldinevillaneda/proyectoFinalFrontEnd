<<<<<<< HEAD
'use strict';
=======
"use strict";
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
var stripSpacesBefore = exports.stripSpacesBefore = function stripSpacesBefore(node, spaces) {
  return function (fixer) {
    return fixer.removeRange([node.start - spaces, node.start]);
  };
};

var stripSpacesAfter = exports.stripSpacesAfter = function stripSpacesAfter(node, spaces) {
  return function (fixer) {
    return fixer.removeRange([node.end, node.end + spaces]);
  };
};

var addSpaceBefore = exports.addSpaceBefore = function addSpaceBefore(node) {
  return function (fixer) {
=======
exports.replaceWithSpace = exports.addSpace = exports.stripSpaces = exports.replaceWithSpaceAfter = exports.replaceWithSpaceBefore = exports.addSpaceAfter = exports.addSpaceBefore = exports.stripSpacesAfter = exports.stripSpacesBefore = void 0;

const stripSpacesBefore = (node, spaces) => {
  return fixer => {
    return fixer.removeRange([node.range[0] - spaces, node.range[0]]);
  };
};

exports.stripSpacesBefore = stripSpacesBefore;

const stripSpacesAfter = (node, spaces) => {
  return fixer => {
    return fixer.removeRange([node.range[1], node.range[1] + spaces]);
  };
};

exports.stripSpacesAfter = stripSpacesAfter;

const addSpaceBefore = node => {
  return fixer => {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return fixer.insertTextBefore(node, ' ');
  };
};

<<<<<<< HEAD
var addSpaceAfter = exports.addSpaceAfter = function addSpaceAfter(node) {
  return function (fixer) {
=======
exports.addSpaceBefore = addSpaceBefore;

const addSpaceAfter = node => {
  return fixer => {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return fixer.insertTextAfter(node, ' ');
  };
};

<<<<<<< HEAD
var replaceWithSpaceBefore = exports.replaceWithSpaceBefore = function replaceWithSpaceBefore(node, spaces) {
  return function (fixer) {
    return fixer.replaceTextRange([node.start - spaces, node.start], ' ');
  };
};

var replaceWithSpaceAfter = exports.replaceWithSpaceAfter = function replaceWithSpaceAfter(node, spaces) {
  return function (fixer) {
    return fixer.replaceTextRange([node.end, node.end + spaces], ' ');
  };
};

var stripSpaces = exports.stripSpaces = function stripSpaces(direction, node, spaces) {
=======
exports.addSpaceAfter = addSpaceAfter;

const replaceWithSpaceBefore = (node, spaces) => {
  return fixer => {
    return fixer.replaceTextRange([node.range[0] - spaces, node.range[0]], ' ');
  };
};

exports.replaceWithSpaceBefore = replaceWithSpaceBefore;

const replaceWithSpaceAfter = (node, spaces) => {
  return fixer => {
    return fixer.replaceTextRange([node.range[1], node.range[1] + spaces], ' ');
  };
};

exports.replaceWithSpaceAfter = replaceWithSpaceAfter;

const stripSpaces = (direction, node, spaces) => {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  if (direction === 'before') {
    return stripSpacesBefore(node, spaces);
  } else {
    return stripSpacesAfter(node, spaces);
  }
};

<<<<<<< HEAD
var addSpace = exports.addSpace = function addSpace(direction, node) {
=======
exports.stripSpaces = stripSpaces;

const addSpace = (direction, node) => {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  if (direction === 'before') {
    return addSpaceBefore(node);
  } else {
    return addSpaceAfter(node);
  }
};

<<<<<<< HEAD
var replaceWithSpace = exports.replaceWithSpace = function replaceWithSpace(direction, node, spaces) {
=======
exports.addSpace = addSpace;

const replaceWithSpace = (direction, node, spaces) => {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  if (direction === 'before') {
    return replaceWithSpaceBefore(node, spaces);
  } else {
    return replaceWithSpaceAfter(node, spaces);
  }
<<<<<<< HEAD
};
=======
};

exports.replaceWithSpace = replaceWithSpace;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
