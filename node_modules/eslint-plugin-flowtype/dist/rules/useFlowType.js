<<<<<<< HEAD
'use strict';
=======
"use strict";
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
var schema = [];

var create = function create(context) {
  var markTypeAsUsed = function markTypeAsUsed(node) {
    context.markVariableAsUsed(node.id.name);
  };
  var markTypeAsUsedWithGenericType = function markTypeAsUsedWithGenericType(node) {
    var typeId = void 0;
    var scope = void 0;
    var variable = void 0;
=======
exports.default = void 0;
const schema = [];

const create = context => {
  const markTypeAsUsed = node => {
    context.markVariableAsUsed(node.id.name);
  };

  const markTypeAsUsedWithGenericType = node => {
    let typeId;
    let scope;
    let variable;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f

    if (node.id.type === 'Identifier') {
      typeId = node.id;
    } else if (node.id.type === 'QualifiedTypeIdentifier') {
      typeId = node.id;
<<<<<<< HEAD
=======

>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
      do {
        typeId = typeId.qualification;
      } while (typeId.qualification);
    }

    for (scope = context.getScope(); scope; scope = scope.upper) {
      variable = scope.set.get(typeId.name);
<<<<<<< HEAD
=======

>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
      if (variable && variable.defs.length) {
        context.markVariableAsUsed(typeId.name);
        break;
      }
    }
  };

  return {
    DeclareClass: markTypeAsUsed,
    DeclareFunction: markTypeAsUsed,
    DeclareModule: markTypeAsUsed,
    DeclareVariable: markTypeAsUsed,
    GenericTypeAnnotation: markTypeAsUsedWithGenericType,
<<<<<<< HEAD
    TypeParameterDeclaration(node) {
      node.params.forEach(function (param) {
=======

    TypeParameterDeclaration(node) {
      node.params.forEach(param => {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
        if (param.default && param.default.typeParameters) {
          if (param.default.type === 'GenericTypeAnnotation') {
            markTypeAsUsedWithGenericType(param.default);
          }

<<<<<<< HEAD
          param.default.typeParameters.params.forEach(function (typeParameterNode) {
=======
          param.default.typeParameters.params.forEach(typeParameterNode => {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
            if (typeParameterNode.type === 'GenericTypeAnnotation') {
              markTypeAsUsedWithGenericType(typeParameterNode);
            }
          });
        }
      });
    }
<<<<<<< HEAD
  };
};

exports.default = {
  create,
  schema
};
=======

  };
};

var _default = {
  create,
  schema
};
exports.default = _default;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
module.exports = exports.default;