'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

<<<<<<< HEAD
function _path() {
  const data = _interopRequireDefault(require('path'));

  _path = function _path() {
=======
function _os() {
  const data = require('os');

  _os = function () {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _os() {
  const data = _interopRequireDefault(require('os'));

  _os = function _os() {
=======
function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _realpathNative() {
  const data = require('realpath-native');

  _realpathNative = function _realpathNative() {
=======
function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
=======
function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function () {
    return cache;
  };
  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const getCacheDirectory = () => {
<<<<<<< HEAD
  const _process = process,
    getuid = _process.getuid;

  const tmpdir = _path().default.join(
    (0, _realpathNative().sync)(_os().default.tmpdir()),
=======
  const {getuid} = process;
  const tmpdirPath = path().join(
    (0, _jestUtil().tryRealpath)((0, _os().tmpdir)()),
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    'jest'
  );

  if (getuid == null) {
<<<<<<< HEAD
    return tmpdir;
=======
    return tmpdirPath;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  } else {
    // On some platforms tmpdir() is `/tmp`, causing conflicts between different
    // users and permission issues. Adding an additional subdivision by UID can
    // help.
<<<<<<< HEAD
    return `${tmpdir}_${getuid.call(process).toString(36)}`;
=======
    return `${tmpdirPath}_${getuid.call(process).toString(36)}`;
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  }
};

var _default = getCacheDirectory;
exports.default = _default;
