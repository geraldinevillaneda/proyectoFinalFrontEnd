'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
<<<<<<< HEAD
exports.findSiblingsWithFileExtension = void 0;

function _path() {
  const data = _interopRequireDefault(require('path'));

  _path = function _path() {
=======
exports.findSiblingsWithFileExtension = exports.decodePossibleOutsideJestVmPath = exports.createOutsideJestVmPath = void 0;

function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _slash() {
  const data = _interopRequireDefault(require('slash'));

  _slash = function _slash() {
=======
function _glob() {
  const data = _interopRequireDefault(require('glob'));

  _glob = function () {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _glob() {
  const data = _interopRequireDefault(require('glob'));

  _glob = function _glob() {
=======
function _slash() {
  const data = _interopRequireDefault(require('slash'));

  _slash = function () {
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

<<<<<<< HEAD
=======
function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function () {
    return cache;
  };
  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
<<<<<<< HEAD
=======
const OUTSIDE_JEST_VM_PROTOCOL = 'jest-main:'; // String manipulation is easier here, fileURLToPath is only in newer Nodes,
// plus setting non-standard protocols on URL objects is difficult.

const createOutsideJestVmPath = path =>
  OUTSIDE_JEST_VM_PROTOCOL + '//' + encodeURIComponent(path);

exports.createOutsideJestVmPath = createOutsideJestVmPath;

const decodePossibleOutsideJestVmPath = outsideJestVmPath => {
  if (outsideJestVmPath.startsWith(OUTSIDE_JEST_VM_PROTOCOL)) {
    return decodeURIComponent(
      outsideJestVmPath.replace(
        new RegExp('^' + OUTSIDE_JEST_VM_PROTOCOL + '//'),
        ''
      )
    );
  }

  return undefined;
};

exports.decodePossibleOutsideJestVmPath = decodePossibleOutsideJestVmPath;

>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
const findSiblingsWithFileExtension = (
  moduleFileExtensions,
  from,
  moduleName
) => {
<<<<<<< HEAD
  if (
    !_path().default.isAbsolute(moduleName) &&
    _path().default.extname(moduleName) === ''
  ) {
    const dirname = _path().default.dirname(from);

    const pathToModule = _path().default.resolve(dirname, moduleName);
=======
  if (!path().isAbsolute(moduleName) && path().extname(moduleName) === '') {
    const dirname = path().dirname(from);
    const pathToModule = path().resolve(dirname, moduleName);
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f

    try {
      const slashedDirname = (0, _slash().default)(dirname);

      const matches = _glob()
        .default.sync(`${pathToModule}.*`)
        .map(match => (0, _slash().default)(match))
        .map(match => {
<<<<<<< HEAD
          const relativePath = _path().default.posix.relative(
            slashedDirname,
            match
          );

          return _path().default.posix.dirname(match) === slashedDirname
=======
          const relativePath = path().posix.relative(slashedDirname, match);
          return path().posix.dirname(match) === slashedDirname
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
            ? `./${relativePath}`
            : relativePath;
        })
        .map(match => `\t'${match}'`)
        .join('\n');

      if (matches) {
        const foundMessage = `\n\nHowever, Jest was able to find:\n${matches}`;
        const mappedModuleFileExtensions = moduleFileExtensions
          .map(ext => `'${ext}'`)
          .join(', ');
        return (
          foundMessage +
          "\n\nYou might want to include a file extension in your import, or update your 'moduleFileExtensions', which is currently " +
<<<<<<< HEAD
          `[${mappedModuleFileExtensions}].\n\nSee https://jestjs.io/docs/en/configuration#modulefileextensions-array-string`
        );
      }
    } catch (ignored) {}
=======
          `[${mappedModuleFileExtensions}].\n\nSee https://jestjs.io/docs/en/configuration#modulefileextensions-arraystring`
        );
      }
    } catch {}
>>>>>>> b459a022f47e1c55fb538e6c6b01f47908ccd92f
  }

  return '';
};

exports.findSiblingsWithFileExtension = findSiblingsWithFileExtension;
